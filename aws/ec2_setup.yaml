AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy's EC2 instance and Elastic IP to use with masTKO
Parameters:
  NamePrefix:
    Type: String
    Description: A unique prefix given to the stack resources
  InstanceType:
    Type: String
    Default: m6gd.xlarge
    Description: EC2 Instance type to use. The default EC2 AMI requires a ARM64 based processor, please choose a compatible EC2 Instance Type. Refer https://aws.amazon.com/ec2/instance-types/ for details.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: AWS VPC id to use for deployment.
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: AWS VPC Public Subnet ID to place the instance.
  ControllerImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: defaults to latest Amazon Linux 2, change only if necessary
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
  BruteForceImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: defaults to latest Amazon Linux 2, change only if necessary
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
  AutoScalingGroupSize:
    Type: Number
    Description: Number of instances to launch in the AutoScaling Group.  10 is a good starting point.
    Default: 10
  AllowSSHFrom:
    Type: String
    Default: ""
    Description: CIDR block to allow SSH access to the Controller instance. Default is "" which means no access.
  SshPublicKey:
    Type: String
    Description: public key to setup SSH access to Ec2 Instance. The access will be through AWS Systems Manager (Session Manger) plugin. Refer https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/session-manager.html
Conditions:
  AllowSSHFromCondition: !Not [!Equals [!Ref AllowSSHFrom, ""]]
Resources:
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub '${NamePrefix}-ssm-login-permissions'
          PolicyDocument:
            Statement:
              - Action:
                  - "ssm:UpdateInstanceInformation"
                  - "ssmmessages:CreateControlChannel"
                  - "ssmmessages:CreateDataChannel"
                  - "ssmmessages:OpenControlChannel"
                  - "ssmmessages:OpenDataChannel"
                Effect: "Allow"
                Resource: "*"
              - Action:
                  - "s3:GetEncryptionConfiguration"
                Effect: "Allow"
                Resource: "*"
              - Action:
                  - "kms:Decrypt"
                Effect: "Allow"
                Resource: "*"
        - PolicyName: !Sub '${NamePrefix}-mastko-bruteforce-permissions-ec2'
          PolicyDocument:
            Statement:
              - Action:
                  - "ec2:DisassociateAddress"
                  - "ec2:DescribeAddresses"
                  - "ec2:DescribeInstances"
                  - "ec2:CreateTags"
                  - "ec2:AssociateAddress"
                Effect: "Allow"
                Resource: "*"
        - PolicyName: !Sub '${NamePrefix}-mastko-bruteforce-permissions-asg'
          PolicyDocument:
            Statement:
              - Action:
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "autoscaling:DetachInstances"
                Effect: "Allow"
                Resource: !Sub "arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${NamePrefix}-bruteforce-asg"
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2InstanceRole
  
  Ec2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "In/out traffic for mastko ${NamePrefix}"
      GroupName: !Sub "${NamePrefix}-mastko-sg"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        !If
          - AllowSSHFromCondition
          - - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: !Ref AllowSSHFrom
          - !Ref "AWS::NoValue"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  ControllerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${NamePrefix}-mastko-controller"
      LaunchTemplateData:
        ImageId: !Ref ControllerImageId
        InstanceType: !Ref InstanceType
        NetworkInterfaces:
          - AssociatePublicIpAddress: "true"
            DeviceIndex: "0"
            Groups:
              - !GetAtt Ec2InstanceSecurityGroup.GroupId
            SubnetId: !Ref SubnetId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${NamePrefix}-mastko-controller"
        IamInstanceProfile:
          Name: !Ref Ec2InstanceProfile
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 1
          HttpEndpoint: enabled
             
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash

            echo ${SshPublicKey} >> /home/ec2-user/.ssh/authorized_keys

            # set up python environment
            yum -y groupinstall "Development Tools"
            yum -y install openssl-devel bzip2-devel libffi-devel sqlite-devel libpcap-devel
            yum -y install wget tmux
            cd /opt
            wget https://www.python.org/ftp/python/3.9.10/Python-3.9.10.tgz
            tar xvf Python-3.9.10.tgz
            cd Python-3.9.10
            ./configure --enable-optimizations --prefix=/usr
            make altinstall
            
            yum install -y git

            export WORKDIR=/opt

            # Install MasTKO
            cd $WORKDIR
            git clone https://github.com/kwkeefer/mastko.git
            cd mastko
            git checkout ged
            python3.9 -m pip install .

            cat << EOF > /etc/profile.d/mastko.sh
            #!/bin/bash
            export AWS_REGION_NAME="${AWS::Region}"
            export MASTKO_ASG_NAME="${NamePrefix}-bruteforce-asg"
            export MASTKO_EIP_ALLOCATION_ID="${EIP.AllocationId}"
            export MASTKO_EIP="${EIP}"
            export MASTKO_VPC_ID="${VpcId}"
            export MASTKO_SUBNET_ID="${SubnetId}"
            EOF
            chmod 755 /etc/profile.d/mastko.sh


  ControllerInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref ControllerLaunchTemplate
        Version: !GetAtt ControllerLaunchTemplate.LatestVersionNumber
  
  BruteForceLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref BruteForceImageId
      InstanceType: t4g.nano
      AssociatePublicIpAddress: "true"
      SecurityGroups:
        - !GetAtt BruteForceSg.GroupId
  BruteForceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${NamePrefix}-mastko-bruteforce"
      LaunchTemplateData:
        ImageId: !Ref BruteForceImageId
        InstanceType: t4g.nano
        NetworkInterfaces:
             - AssociatePublicIpAddress: "true"
               DeviceIndex: "0"
               Groups:
                 - !GetAtt BruteForceSg.GroupId
               SubnetId: !Ref SubnetId
        TagSpecifications:
             - ResourceType: instance
               Tags:
                 - Key: Name
                   Value: !Sub "${NamePrefix}-mastko-bruteforce"
        IamInstanceProfile:
          Name: !Ref Ec2InstanceProfile
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 1
          HttpEndpoint: enabled
  BruteForceSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "Empty Security Group for ${NamePrefix}-bruteforce"
      GroupName: !Sub "${NamePrefix}-mastko-bruteforce-sg"
      VpcId: !Ref VpcId
  BruteForceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${NamePrefix}-bruteforce-asg"
      LaunchTemplate:
        Version: !GetAtt BruteForceLaunchTemplate.LatestVersionNumber
        LaunchTemplateId: !Ref BruteForceLaunchTemplate
      MinSize: !Ref AutoScalingGroupSize
      MaxSize: !Ref AutoScalingGroupSize
      DesiredCapacity: !Ref AutoScalingGroupSize
      VPCZoneIdentifier:
        - !Ref SubnetId
      Tags:
        - Key: Name
          Value: !Sub "${NamePrefix}-bruteforce-asg"
          PropagateAtLaunch: true
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
Outputs:
  ControllerInstance:
    Value: !Ref ControllerInstance
  AutoScalingGroup:
    Value: !Ref BruteForceAsg
  EipAddress:
    Value: !Ref EIP
  EipAllocationId:
    Value: !GetAtt EIP.AllocationId
