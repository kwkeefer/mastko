AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy's EC2 instance and Elastic IP to use with masTKO
Parameters:
  InstanceNamePrefix:
    Type: String
    Description: A unique prefix given to the instance name
  InstanceType:
    Type: String
    Description: EC2 Instance type to use. The default EC2 AMI requires a ARM64 based processor, please choose a compatible EC2 Instance Type. Refer https://aws.amazon.com/ec2/instance-types/ for details.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: AWS VPC id to use for deployment.
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: AWS VPC Public Subnet ID to place the instance.
  ControllerImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: defaults to latest Amazon Linux 2, change only if necessary
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
  BruteForceImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: defaults to latest Amazon Linux 2, change only if necessary
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
  AllowSSHFrom:
    Type: String
    Default: ""
    Description: CIDR block to allow SSH access to the instance. Default is "" which means no access.
  SshPublicKey:
    Type: String
    Description: public key to setup SSH access to Ec2 Instance. The access will be through AWS Systems Manager (Session Manger) plugin. Refer https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/session-manager.html
Conditions:
  AllowSSHFromCondition: !Not [!Equals [!Ref AllowSSHFrom, ""]]
Resources:
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub 'mastko-ssm-login-permissions-for-${InstanceNamePrefix}'
          PolicyDocument:
            Statement:
              - Action:
                  - "ssm:UpdateInstanceInformation"
                  - "ssmmessages:CreateControlChannel"
                  - "ssmmessages:CreateDataChannel"
                  - "ssmmessages:OpenControlChannel"
                  - "ssmmessages:OpenDataChannel"
                Effect: "Allow"
                Resource: "*"
              - Action:
                  - "s3:GetEncryptionConfiguration"
                Effect: "Allow"
                Resource: "*"
              - Action:
                  - "kms:Decrypt"
                Effect: "Allow"
                Resource: "*"
        - PolicyName: !Sub 'mastko-bruteforce-permissions-for-${InstanceNamePrefix}'
          PolicyDocument:
            Statement:
              - Action:
                  - "ec2:DisassociateAddress"
                  - "ec2:DescribeAddresses"
                  - "ec2:DescribeInstances"
                  - "ec2:CreateTags"
                  - "ec2:AssociateAddress"
                Effect: "Allow"
                Resource: "*"

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2InstanceRole
  
  Ec2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "In/out traffic for mastko ${InstanceNamePrefix}"
      GroupName: !Sub "mastko-${InstanceNamePrefix}-sg"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        !If
          - AllowSSHFromCondition
          - - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: !Ref AllowSSHFrom
          - !Ref "AWS::NoValue"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  
  ControllerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ControllerImageId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref Ec2InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${InstanceNamePrefix}-Controller"
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: "true"
          SubnetId: !Ref SubnetId
          GroupSet:
            - !GetAtt Ec2InstanceSecurityGroup.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          echo ${SshPublicKey} >> /home/ec2-user/.ssh/authorized_keys

          # set up python environment
          yum -y groupinstall "Development Tools"
          yum -y install openssl-devel bzip2-devel libffi-devel sqlite-devel libpcap-devel
          yum -y install wget tmux
          cd /opt
          wget https://www.python.org/ftp/python/3.9.10/Python-3.9.10.tgz
          tar xvf Python-3.9.10.tgz
          cd Python-3.9.10
          ./configure --enable-optimizations --prefix=/usr
          make altinstall
          
          yum install -y git

          export WORKDIR=/opt

          # Install MasTKO
          cd $WORKDIR
          git clone https://github.com/kwkeefer/mastko.git
          cd mastko
          git checkout ged
          python3.9 -m pip install .
  BruteForceInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BruteForceImageId
      InstanceType: t4g.nano
      IamInstanceProfile: !Ref Ec2InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${InstanceNamePrefix}-BruteForce"
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: "true"
          SubnetId: !Ref SubnetId
          GroupSet:
            - !GetAtt Ec2InstanceSecurityGroup.GroupId
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
Outputs:
  ControllerInstance:
    Value: !Ref ControllerInstance
  BruteForceInstance:
    Value: !Ref BruteForceInstance
  EIP:
    Value: !Ref EIP
